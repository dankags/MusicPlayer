// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(uuid()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(uuid()) @map("_id") 
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  followingArtist     String[]
  admin Boolean @default(false)
  
  likedSongs    LikedSong[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String  @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model LikedSong{
  id String  @id @default(uuid()) @map("_id")
  userId String @unique 
  title String @default("Liked Songs")
  imageUrl String?
  songs String[]

  LikedSongId User @relation(fields: [userId],references: [id])
}

model Artist{
  id String @id @default(uuid()) @map("_id") 
  name String @unique
  profileImg String?
  backImg String?
  artistAbout String?
  followers String[]
  

  musics Music[]
  playList Playlist[]
}

model Music{
  id String @id @default(uuid()) @map("_id") 
  musicName String @unique
  categoryName String @unique
  artistIds String @unique
  viewsNumber Int @default(0)
  musicImage String
  audioUrl String
  duration String
  lyrics String?
  release DateTime?
  uploaded DateTime @default(now())
  
  
  artist Artist @relation(fields: [artistIds],references: [id] )
  song Playlist []
  category Category @relation(fields: [categoryName],references: [category])
  
} 

model Category{
  id String @id @default(uuid()) @map("_id") 
  category String @unique
  backgroundColor String 
  backgroundImg String

musics Music[] 
}

model Playlist{
  id String @id @default(uuid()) @map("_id")
  artistId String @unique
  playlistName String @unique
  plalistImg String
  playlistDesc String ?

  artist Artist @relation(fields: [artistId],references: [id])
  songs Music @relation(fields: [artistId],references: [artistIds])
}